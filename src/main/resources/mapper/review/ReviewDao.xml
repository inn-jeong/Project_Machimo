<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.project_machimo.review.dao.ReviewDao">

    <select id="list" resultType="com.example.project_machimo.review.dto.ReviewDto">
        SELECT *
        FROM review
        order by review_id desc
    </select>

    <select id="listWithPaging" resultType="com.example.project_machimo.review.dto.ReviewDto">
<!--        (select review_id, products_id, review_writter, review_title, review_content, review_star, review_img, review_date, review_hit-->

        <![CDATA[
                select * from (
                select rownum rn, temp.* from
                (select *
                from review
                order by review_id desc ) temp
                where rownum <= ( #{pageNum} * #{amount}))
                where rn > (#{pageNum} -1) * #{amount}
                ]]>
    </select>



    <insert id="write">

        <selectKey resultType="int" keyProperty="review_id" order="AFTER">
            SELECT MAX(review_id) FROM review
        </selectKey>
        INSERT INTO review (review_id, product_id, review_writter, review_title, review_content, review_star)
        VALUES ((SELECT MAX(review_id)+1 FROM review), #{productId}, #{reviewWritter}, #{reviewTitle}, #{reviewContent}, #{reviewStar})

<!--        INSERT INTO review (review_id, products_id, review_writter, review_title, review_content, review_star, review_img, review_thum)-->
<!--        VALUES ((SELECT MAX(review_id)+1 FROM review), #{productId}, #{reviewWritter}, #{reviewTitle}, #{reviewContent}, #{reviewStar}, #{reviewImg}, #{reviewThum})-->
    </insert>


    <select id="contentView" resultType="com.example.project_machimo.review.dto.ReviewDto" parameterType="HashMap">
        SELECT *
        FROM review
        WHERE review_id = #{reviewId}
    </select>
    <select id="getTotalCount" resultType="int">
        select count(*) from review
    </select>

    <update id="modify" parameterType="HashMap">
        UPDATE review
        SET review_title = #{reviewTitle},
        review_star = #{reviewStar},
<!--        review_img = #{reviewImg},-->
        review_content = #{reviewContent}
        WHERE review_id = #{reviewId}
    </update>
    <update id="updateCount">
        update review
<!--        set review_hit = #{reviewHit} + 1-->
        set review_hit = review_hit + 1
        WHERE review_id = #{reviewId}
    </update>
    <select id="modify_view" resultType="com.example.project_machimo.review.dto.ReviewDto">
        SELECT *
        FROM review
        WHERE review_id = #{reviewId}
    </select>


    <delete id="delete" parameterType="String">
        DELETE FROM review
        WHERE review_id = #{reviewId}
    </delete>

    <insert id="imageEnroll">
        insert into review_image(review_id, file_name, upload_path, uuid)
        values (#{reviewId}, #{fileName}, #{uploadPath}, #{uuid});
    </insert>


<!--    useGeneratedKeys 옵션을 true로 설정하면 생성된 게시글의 PK가 parameterType에 선언된 요청 객체(params)에 저장되며, keyProperty에 선언된 id에 값이 매핑(바인딩)됩니다.-->
<!--    <insert id="save" parameterType="com.study.domain.post.PostRequest" useGeneratedKeys="true" keyProperty="id">-->
    
    
<!--                댓글     -->
    <insert id="addReply">
        INSERT INTO
        tb_reply
        (
        board_id,
        reply_id,
        contents
        )
        VALUES
        (
        #{boardId},
        #{replyId},
        #{contents}
        )
    </insert>

    <select id="getReply" resultType="com.example.project_machimo.review.dto.ReplyDto">
        SELECT
        id, board_id, reply_id , contents
        FROM
        tb_reply
        WHERE
        board_id = #{boardId}
        order by reply_id asc
    </select>
    
</mapper>
